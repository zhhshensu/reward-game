import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState, useRef, useMemo } from 'react'
import Price from '../utils/game'
import { Howl, Howler } from 'howler'
import gsap from 'gsap'

const Home: NextPage = (props) => {
  const [names, setNames] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const [selection, setSelection] = useState<any[]>([])
  const ref = useRef<Price | null>()
  const initData = useMemo(() => {
    return ['凌大', '唐二', '张三', '李四', '王五', '朱六', '卓七']
  }, [])
  const [cards, setCards] = useState(initData)
  useEffect(() => {
    if (!ref.current) {
      ref.current = new Price({
        data: initData,
        onEnd: () => {},
      })
    }
    return () => {
      ref.current = null
    }
  }, [initData])
  const run = () => {
    if (ref.current) {
      if (loading) return
      setLoading(true)
      setTimeout(() => {
        if (ref.current) {
          ref.current.run()
          const names = ref.current.getSelectedName()
          setLoading(false)
          setNames(names)
        }
      }, 2000)
    }
  }
  const reset = async () => {
    if (ref.current) {
      const names = ref.current.shuffle()
      setCards(names)
    }
  }
  const flipCard = (i: number) => {
    return new Promise((resolve, revoke) => {
      const cards = document.getElementById('cards')
      if (cards) {
        gsap.to(cards.children[i], {
          duration: 1,
          rotationY: '+=180',
          ease: 'circ.out',
          onComplete: () => {
            // Resolve
            resolve(null)
          },
        })
      }
    })
  }

  const playSound = (name: string) => {
    // Initialize song
    let sound = new Howl({
      src: [`https://assets.codepen.io/141041/${name}.mp3`],
    })
    // Play song
    sound.play()
  }
  async function selectCard(i: number, selection: any[]) {
    if (!selection.includes(i)) {
      setSelection(selection.concat(i))
      // Play select
      playSound('select')
      // Flip selected card
      await flipCard(i)
    }
  }
  return (
    <div className='w-full bg-blue-500 h-screen'>
      <Head>
        <title>奖励游戏</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className='flex justify-center pt-[60px]'>
        <div className='w-3/4 bg-white rounded shadow-md'>
          <h1 className='text-bold text-[16px] text-green-800 px-4 py-2 border-b text-center'>
            抽奖大赛
          </h1>
          <div className='m-auto px-4 py-4 pb-0'>
            <div
              id='cards'
              className='grid gap-3 grid-cols-10 md:grid-cols-12 lg:grid-cols-15 grid-rows-6 md:grid-rows-5 lg:grid-rows-4'
            >
              {cards.map((card, inx) => {
                return (
                  <div
                    className='card'
                    key={card}
                    onClick={() => selectCard(inx, selection)}
                  >
                    <div className='face front flex items-center justify-center text-[14px]'>
                      {card}
                    </div>
                    <div className='face back bg-gray-400'></div>
                  </div>
                )
              })}
            </div>
          </div>
          <div className='px-4 py-2'>
            <button
              className='inline-flex bg-yellow-500 rounded py-1 px-4 text-white text-[14px] mr-4'
              onClick={reset}
            >
              洗牌
            </button>
          </div>
        </div>
      </main>

      <footer></footer>
    </div>
  )
}

export async function getStaticProps() {
  // Call an external API endpoint to get posts.
  // You can use any data fetching library
  const users: string[] = []

  // By returning { props: { posts } }, the Blog component
  // will receive `posts` as a prop at build time
  return {
    props: {
      users,
    },
  }
}

export default Home
